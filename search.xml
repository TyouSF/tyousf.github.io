<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Appium Demo 下篇]]></title>
      <url>%2F2017%2F04%2F07%2FAppium-Demo-%E4%B8%8B%E7%AF%87%2F</url>
      <content type="text"><![CDATA[一个Appium的Demo之旅 TyouSF 本文我们将使用Python语言编写第一个基于Appium的自动化测试脚本。 脚本实际运行效果：在Android模拟器中，自行调用计算器，完成一个简单的数学计算：1+1 编写前必须要声明的注意事项： Appium当前版本为：1.4.16.1由于版本原因，当前该版本最高支持到Android M，及Android 6.0，对应Android API 23 安卓模拟器的创建基于上一条Appium的原因，对7.0以上的Android版本支持不太友好，存在Bug，如果您坚持使用基于7.0以上创建的安卓模拟器，运行过程中可能会遇到各种问题，不建议采用。建议创建一个基于Android 6.0 版本的模拟器，如果您还不知道怎么创建，可详细查阅Appium Demo 上篇 启动Appium运行Appium客户端，并启动Appium服务。启动图如下： 启动Android AVD打开Android Studio启动创建好的安卓模拟器即可 编写Python脚本1234567891011121314151617181920from appium import webdriverdesired_caps = &#123;&#125;desired_caps['platformName'] = 'Android'desired_caps['platformVersion'] = '4.4.2'desired_caps['deviceName'] = 'Android Emulator'desired_caps['appPackage'] = 'com.android.calculator2'desired_caps['appActivity'] = '.Calculator'driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)driver.find_element_by_name("1").click()driver.find_element_by_name("+").click()driver.find_element_by_name("1").click()driver.find_element_by_name("=").click()driver.quit() 执行脚本假设您编写的脚本名称为：demo.py1python demo.py 如果没有异常，运行脚本后，您便可以在Android AVD中看到整个执行过程。就像这样：↓]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Appium Demo 上篇]]></title>
      <url>%2F2017%2F04%2F06%2FAppium-Demo-%E4%B8%8A%E7%AF%87%2F</url>
      <content type="text"><![CDATA[Pytho + Android AVD + Appium构建我们的第一个DEMO TyouSF 本篇内容要旨： 主要讲述为了完成我们第一个Demo，所需要完成的基本准备工作。 声明：本Demo主要基于Python语言进行编写，因此，准备工作中的语言库也将围绕Python进行展开。如果您使用的是其他的语言，那么非常抱歉，本文可能并不适合您，建议您通过官网进行相关资料的查询与阅读。 接下来，看看我们都需要哪些吧： Python Python第三方库–Appium Python Client Android AVD（简称安卓模拟器） Python 这是我们基于Python语言编写的基本也是硬性要求了，就不多解释了。另：由于本Demo的编写是基于Pyhon3，安装时请务必选择Python3以上的版本。 有关Python的安装，详细可访问Python 官网进行下载。 友情提示：Win操作系统下，为了获得更好的Python支持，在安装Python时，请务必注意一个选项： Add python to Path 该选项即是将python添加至系统的环境变量中，这样在安装以后，您便可以在命令提示符中直接使用python相关的命令而无须再进行环境变量的配置。如果您安装时没在意，没关系，卸载Python后重新安装即可（重新安装时记得选上噢！）。 Appium Python Client仅仅是安装Python的语言环境是不够的，我们还要安装Appium的支持库。安装很简单，但是在安装前，不得不提的是：由于直接安装，可能会导致您当前Python的语言环境不够纯粹。通常情况下，在使用Python的过程中，为了满足不同的项目需求，需要各种第三方库的支持，为了方便管理也为了保持本身Python语言环境的纯粹，会使用沙盒来进行管理和安装。 沙盒：所谓沙盒环境，是使用Python进行创建的一个基于纯粹Python语言环境下的虚拟环境。在Python中，通常叫做“venv”。安装第三方库便可以在“venv”中进行安装，这样既不会影响我们主题的Python语言环境，也可以为不同的项目创建不同的“venv”环境。 安装Appium Python Client———— 在命令提示符下，使用如下命令创建“venv”： 1python -m venv venv 激活虚拟环境 1venv\Scripts\activate.bat 安装Appium Python Client 1pip install Appium-Python-Client 上述总执行过程类似如下图所示： Android AVD（简称安卓模拟器）由于Demo编写后，需要借助安卓模拟器来展示效果，因此需要安装一下Android AVD。如果您看过上一篇文章Appium 基础的话，相信基本环境已经搭建完毕了。而我们Android AVD的安装便需要用到Android Studio。 启动Android Studio后，参照下图所示的顺序以及说明进行安装即可。 结语 至此，Demo上篇的基本准备工作已经完毕。接下来，让我们一起看看一个Demo是如何编写的吧。开始前，您可以参照下列资料进行一些自行学习和了解： Appium Python ClientPython3 教程]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Appium 基础]]></title>
      <url>%2F2017%2F04%2F05%2FAppium%20%E5%9F%BA%E7%A1%80%2F</url>
      <content type="text"><![CDATA[Appium是一个自动化测试开源工具，支持 iOS 平台和 Android 平台上的原生应用，web 应用和混合应用。 Appium TyouSF Appium 介绍 Appium 是一个自动化测试开源工具，支持 iOS 平台和 Android 平台上的原生应用，web 应用和混合应用。 “移动原生应用”是指那些用iOS或者Android SDK写的原生应用。 “移动web应用”是指使用移动浏览器访问的应用。 “混合应用”是指原生代码内嵌H5的形式。比如应用内直接打开网页等。 除此之外，Appium 是一个跨平台的工具：它允许测试人员在不同的平台（iOS，Android）使用同一套API来写自动化测试脚本，这样大大增加了测试套件间代码的复用性。 Appium理念为了满足移动自动化需求，Appium 遵循着一种哲学，主要有以下4条： 你无需为了自动化，而重新编译或者修改你的应用。 你不必局限于某种语言或者框架来写和运行测试脚本。 一个移动自动化的框架不应该在接口上重复造轮子。（移动自动化的接口应该统一） 无论是精神上，还是名义上，都必须开源。 Appium框架Appium真正的工作引擎其实是苹果和谷歌官方提供的测试框架： iOS: 苹果的UIAutomation Android: Google的UiAutomator 将这些框架封装成一套API–WebDriver（也就是 “Selenium WebDriver”） 指定了客户端到服务端的协议。使用这种客户端-服务端的架构，我们可以使用任何语言来编写客户端，向服务端发送恰当的 HTTP 请求。 事实上 WebDriver 已经成为 web 浏览器自动化的标准，也成了 W3C 的标准——W3C Working Draft 概念注解C/S 架构Appium的核心是一个web服务器，它提供了一套接口。它收到客户端的连接，监听到命令，然后在移动设备上按照这些命令执行，然后将执行结果放在HTTP响应中返回给客户端。 SessionSession我们可以理解为一个上下文链接的对象，我们每次执行测试时，客户端初始化一个seesion（会话）来与服务端交互，之后，我们每一次的运行命令，都将通过这个Session进行后续命令的传达（下发）。 Desired CapabilitiesDesired capabilities是一些键值对的集合（就好比Python中的字典表），客户端将这些键值对发给服务端，告诉服务端我们想要怎么测试。其中所涉及的一些数值，比如： platformName: iOS：则是告诉Appium服务端，我们测试的应用是ios 等等诸如此类的，可以在后续我们脚本编写中进行更为详细的了解。 Appium Server是用Node.js编写的一个服务器。也是我们所编写测试脚本命令所要发送给的对象，经由Appium Server再向测试应用的终端发送执行命令。我们可以用源码编译或者从NPM直接安装。 Appium ClientAppium Client即我们使用的客户端，也就是我们编写脚本的支持。涉及Java, Ruby, Python, PHP, JavaScript和C#等实现了Appium对WebDriver协议的扩展的语言。我们使用过程中选择一个适合您当前所掌握的语言即可。 Appium 安装 以下将介绍Appium如何安装，以及相关环境的配置。如果其中有哪些您已经安装过或者配置过，您可自行忽略。另：本文所讲述的安装和配置教程，均是基于Win操作系统，如果您使用的是Mac或其他平台，可查询相关官方文档。 安装清单： JAVA JDK Android Studio Node.js Appium JAVA JDKAndroid是由Java语言开发的，所以想开发Android应用首先需要Java环境。 JAVA JDK 下载地址：Java JDK 安装下载后双击安装文件，进行安装即可，安装时可自行更改安装位置。此处假设您安装时所选路径为：D:\Java。 配置接下来，进行环境变量的设置： “我的电脑”右键菜单—&gt;属性—&gt;高级—&gt;环境变量 添加JAVA_HOME的变量（变量值根据当前你所安装的JDK目录下的实际版本进行填写） 12变量名：JAVA_HOME 变量值：D:\Java\jdk1.8.0_121 添加CLASS_PATH的变量 12变量名：CLASS_PATH变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; 在Path变量中添加如下两个变量值（非Win10操作系统直接添加：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;）： %JAVA_HOME%\bin %JAVA_HOME%\jre\bin 截图参考：↓ 校验设置后，在Win下的命令提示符中验证是否配置成功： 打开Win的命令提示符 输入java -version 展示如下图所示结果，即证明JAVA JDK配置成功 Android Studio有看过其他文章和资料的，相信一定看到过很多需要您安装的，诸如“Android SDK”，“Android ADT”，“Android SDK Platform-Tools”等等很多关于Android环境的安装包。但是其实完全是没有必要的。因为现在最新的Android Studio已经集成上述各种的安装包，无需一一去找和一一安装，我们只需要安装一个最新最全的Android Studio即可。 Android Studio Android Studio是一个为Android平台开发程序的集成开发环境。 维基百科zh.wikipedia.org/wiki/Android_Studio 安装访问Android Studio官网进行下载（https://developer.android.com/studio/index.html?hl=zh-cn） 同样，双击安装包进行安装即可，至于安装路径您可自行更改，这点并不影响。 配置Adb参照下图，添加ANDROID HOME的环境变量，以及对应Path下的变量值： 校验adb在Win命令提示符下，输入adb，如果出现下图所示结果，即证明adb配置成功： Node.js安装访问Nodejs官网nodejs，按照下图所示，点击下载即可。下载完毕后，双击安装包进行安装，安装过程中默认各选项，一直下一步即可。 校验在Win命令提示符下，输入node -v，如果出现下图所示结果，即证明node环境OK： Appium有关Appium的安装，官方首页给出的是使用Node.js进行的安装，但是并不建议使用官方的安装命令，因为在安装过程中，会遇到下载异常问题，而且文件也众多，下载也缓慢。建议点击主页的下载按钮来直接下载。下载后，是一个zip包，我们解压后，里面会有两个文件： appium-installer.exe update.bat 安装我们只需要双击appium-installer.exe，进行安装即可。同样的，至于安装在哪里，这完全随您喜欢。 附上安装截图：↓ 校验通过Appium客户端校验启动Appium，正常启动后，则展示如下： 但是这并不能证明我们的Appium整体环境是否已经搭建成功。接下来，我们在启动Appium后，选择执行Appium按钮之后，如果无异常，应当是如下图所示这样： 通过appium-doctor命令校验如果您在看本篇教程之前，有看过他人写的一些文章的话，您可能会接触到这样一条校验appium环境是否搭建成功的命令：1appium-doctor 关于这条命令，并不是所有人都可以直接执行的。首先如果是通过NPM的命令来安装appium的话，笔者并不是很清楚是否可以执行。但是假设您是跟着本教程通过Win下的安装包完成安装的，那么恭喜您：这条命令您并不能直接在Win的命令提示符下执行。执行的时候Win会提示我们这并不是内部或外部命令。原因： 很简单，安装包完成安装后，并没有进行相关环境变量的配置 那么接下来，我们一起看看如何让appium-doctor成功运行： 寻找“appium-doctor”进入到您安装Appium的目中 –》 会看到有一个文件夹名称为：“node_modules” –》 进入“node_modules”后，会看到有个文件夹名称为：“.bin” –》 进入到“.bin”目录中，您便会发现有一个“appium-doctor.cmd”的文件，恭喜您已经找到了！ 配置“appium-doctor”到环境变量”将步骤1中“appium-doctor.cmd”的目录进行复制，就像这样一个地址：E:\Appium\node_modules.bin（具体按照您实际安装的目录进行修改！）。之后进入系统环境变量的Path中进行添加，如图： Win命令提示符下的校验配置后，在Win命令提示符中输入appium-doctor，如果出现类似下图结果：则证明环境成功搭建完毕。（有任何不成功的，都将会标红并提示出具体还缺少什么环境） 结语 相信只要按照本文所述的顺序，进行基本的环境搭建，都应当不会有太大问题。至此，恭喜正在搭建此环境的你，已经成功开启了Appium之旅。接下来，让我们一起看看如何利用‘Python’语言完成我们第一个自动化测试安卓App的Demo脚本吧！ 相关学习资料如下（坚持学习，您将能够获得更多的收获）： Python3 中文教程Appium 中文文档Android 调试桥]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo搭建中的问题整合]]></title>
      <url>%2F2017%2F04%2F01%2FHexo%E6%90%AD%E5%BB%BA%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E6%95%B4%E5%90%88%2F</url>
      <content type="text"><![CDATA[前序 本文旨在对于Hexo搭建过程中，遇到的一些问题的整理，希望也能帮助正在阅读的你，解决一些疑惑 关于npm命令npm命令安装第三方插件时的执行路径使用过Hexo后，我们会发现，前端页面显示通常仅仅支持了简易的markdown语法，如果要扩展在网页中呈现更高级的markdown语法特性，我们便要去寻找扩展的插件。 幸运的是，Hexo官网已经为我们提供了官网的一些可能会用到的插件，我们需要按照官网的链接去寻找，并按照对应的安装方式进行安装即可，这里附上Hexo官方插件查询地址：Hexo 插件 注意:我们在安装任何第三方的插件库来扩展我们的站点时，请务必在我们的站点根目录下执行相应的安装命令。假设——我们的站点，安装在D盘，名为myblog的文件夹下，我们想要让我们的站点支持页面的脚注功能，对应的插件名为hexo-footnotes,首先启动GitBash，然后我们应当这么执行：123456yourpcname@DESKTOP-OLULDAI MINGW64 ~$ cd d:yourpcname@DESKTOP-OLULDAI MINGW64 /d$ cd myblogyourpcname@DESKTOP-OLULDAI MINGW64 /d/myblog$ npm install hexo-footnotes --save 如果你发现安装的插件不起作用，一定要确认是否是在站点目录下执行的安装命令。 学会利用hexo clean的命令如果你发现，你新修改的主题以及样式，没有展示为最新的，可以使用该命令清除数据之后，再次启动或者重新生成站点后再提交至Git。 使用hexo deploy自动部署遇到问题通常使用自带的部署命令可能会存在一些问题，官方也有提及。所以遇到问题之后，建议回归到Git的本质，来使用原生的Git命令来提交。那么问题来了： 我们该把什么作为我们的博客文件提交至Git呢？ 我们该怎么管理我们本地仓库与远程Git仓库呢？ 第一个问题：其实真正需要我们提交至Git，作为我们博客的文件，是我们hexo搭建的站点跟目录下的public文件夹内的所有文件。每当我们要发布最新的博文时，我们就先使用hexo generate来生成public文件夹。第二个问题：建议通过克隆我们远程的站点仓库，来创建我们的本地站点仓库。假设我们在d盘下执行：1234yourpcname@DESKTOP-OLULDAI MINGW64 ~$ cd d:yourpcname@DESKTOP-OLULDAI MINGW64 /d$ git clone git@github.**.... 执行后，我们本地D盘就会有一个Git仓库，里面存放着我们的远程站点内容。此时我们可以将最新的public文件夹内的所有文件拷贝到这里之后，使用如下命令来完成部署：12345678yourpcname@DESKTOP-OLULDAI MINGW64 /d$ cd yourname.github.ioyourpcname@DESKTOP-OLULDAI MINGW64 /d/yourename.github.io$ git add .yourpcname@DESKTOP-OLULDAI MINGW64 /d/yourename.github.io$ git commit -m &apos;***&apos;yourpcname@DESKTOP-OLULDAI MINGW64 /d/yourename.github.io$ git push 关于Hexo的一些提醒事项：Hexo所搭建的博客是静态的，同时GitHubPages虽然是我们的站点博客，但同时也是公开的，因此： 任何人都可以看到我们博客的仓库原文件，因此，切勿存放以及暴露个人隐私数据； 任何人都可以看到我们博客的仓库原文件，因此，切勿存放以及暴露个人隐私数据； 任何人都可以看到我们博客的仓库原文件，因此，切勿存放以及暴露个人隐私数据；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[GitHub Pages + Hexo & NexT 快速构建静态Blog]]></title>
      <url>%2F2017%2F03%2F30%2FGitHub-Pages-Hexo-NexT-%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E9%9D%99%E6%80%81Blog%2F</url>
      <content type="text"><![CDATA[写在本博客搭建完毕之初 本文旨在快速让各位读者拥有属于自己的静态博客，相信纯属小白不懂代码的读者，只要按照如下所述的步骤进行操作，瞬间即可拥有自己的个人免费静态博客。 所涉及到的工具有： Git Node.js Hexo NexT 从GitHub开始，拥有一个不完美的站点有关GitHub尚不清楚的小伙伴，可自行百度，进行更详细的了解。这里只进行简单的介绍和说明： GitHub是一个通过Git进行版本控制的软件源代码托管服务，由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。 维基百科zh.wikipedia.org/wiki/GitHub 注册GitHub访问GitHub主页，进行基本的GitHub账户注册，此时，面前的你可能会面临一个问题————由于国内的“防火长城”，GitHub网站有可能无法访问。有过科学上网经验的小伙伴一定不陌生，使用我们的科学上网姿势，即可访问。如果面前的你对科学上网尚且一无所知，那也没有关系，自行百度“科学上网”，总能找到一款适合您的解决方案。如果你没有更好的选择，那么我个人推荐使用Shadowsocks，打开网站后，切换为中文，按照官网的教程，相信您马上就可以get到科学上网的姿势。 解决墙的问题后，访问GitHub，并完成注册即可。 注册页面见：↓ 快速拥有一个不完美的站点完成注册后，按照下图的顺序，完成各个步骤的操作： 进入到我们的个人资料 进入我们的git仓库 新建一个远程Git代码仓库 新建我们的博客托管仓库此处，我们假设你注册时的github的用户名为：yourname，创建一个yourname.github.io的仓库，具体可参照下图。 创建完毕后，恭喜您，您已经拥有了个人站点，虽然还不完美。 通过在浏览器中输入我们操作4中创建的仓库名，即可访问到。举个例子——我们按照操作4中假设的名称创建的话，那么您访问的地址应当是：https://yourname.github.io/。各位读者只需要把yourname.github.io换成您创建仓库时所填写的对应名称即可。 搭建Hexo，让我们的站点更为完美关于Hexo的搭建，您可以参考Hexo官网，点此→Hexo，阅读更为详细的文档说明。如果您使用的是mac，那么请对照Hexo的官方文档进行搭建，本文主要介绍Windows操作系统上的搭建和使用（请各位读者谅解）。 认识HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Hexo什么是Hexo 环境搭建安装Git看过前面的教程后，大家已经使用过Git，等等，那不是一个网页吗，怎么还需要安装Git了？没错，我们是要安装，原因是，您所访问的是Git的远程仓库托管，但是本地化的Git才是用于我们代码管理的本质，因此我们需要安装一个本地的Git管理工具。 可以访问Git工具的官网Git，和前面所介绍的一样，可能会遇到墙的问题，此处不再细说，可参照前文所写。 登录后，官网点击下载即可，详细如下图：下载完毕后，双击安装包进行安装，安装过程中默认各选项，一直下一步即可。 安装Node.js访问Nodejs官网nodejs，按照下图所示，点击下载即可。下载完毕后，双击安装包进行安装，安装过程中默认各选项，一直下一步即可。 安装Hexo安装完Git后，在桌面空白地方，点击鼠标右键，可发现菜单栏中存在名为Git Bash Here的可选项，我们选择它即可开启我们的git命令行操作界面 选择Git Bash Here 启动Git Bash Here后的界面 安装Hexo在打开的Git Bash界面内，我们输入如下的命令即可完成Hexo的安装 npm install -g hexo-cli Hexo &amp; NexT 让我们的博客更完美使用Hexo与NexT通常我们会有如下的操作来初始化我们的hexo博客，请打开我们的GitBash，在命令行中输入下列的命令： cd d:用于切换到指定盘符下，随您喜欢（建议找一个您方便查看的盘符下） hexo init yourfilenameyourfilename是您指定的文件夹名称（建议英文名，如果您没有好的名字，可以试试“myblog”） cd yourfilename进入到我们hexo初始化的文件夹目录下 npm install完成安装 git clone https://github.com/iissnan/hexo-theme-next themes/next下载NexT主题 打开位于站点(yourfilename)根目录下_config.yml文件，找到 theme 字段，并将其值更改为 next 回到GitBash界面，使用hexo server启动我们的站点 启动后，打开浏览器，输入：localhost:4000即可看到我们本地启动的博客 到此为止，恭喜您，已经成功的让自己的博客运行起来了。 部署本地的博客站点到GitHub上配置Git 安装hexo-deployer-git,在GitBash中使用如下命令npm install hexo-deployer-git --save 在站点根目录下的_config.yml中修改配置deploy: type: git repo: &lt;repository url&gt; branch: master message: 获取repository url,可参照下图： hexo deploy执行后，按照提示输入git账户与密码后，即可完成部署 此时访问您的站点：https://yourname.github.io/即可看您搭建好的博客 感谢您的坚持，同时恭喜您，您的博客已经搭建好了 后续本博客搭建也好，还是后续的文章编写等，都涉及到命令行，因此需要各位读者在后续的时间里，对Hexo的命令，以及Git的命令都要有所了解，同时还要对Markdown的语法有一定的了解，能够编写最基本的Markdown语法的文章。相关学习资料如下（坚持学习，您将能够获得更多的收获）： Git 简体中文版Hexo 文档Markdown 入门参考NexT 使用指南]]></content>
    </entry>

    
  
  
</search>
