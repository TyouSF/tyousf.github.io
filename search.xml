<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Python3 元组]]></title>
      <url>%2FPython3-%E5%85%83%E7%BB%84%2F</url>
      <content type="text"><![CDATA[–本篇主要讲述 Python数据类型之：元组– “优雅” “明确” “简单”Python Python中的数据类型：元组。并且元组的元素不能修改。以括号 ( ) 括起来，每个数据（元素）之间使用英文的逗号 ‘,’ 进行分隔的形式书写的字面值在Python中为元组数据类型。形如：123&gt;&gt;&gt; t = (&apos;a&apos;, 1, 2, &apos;hello&apos;)&gt;&gt;&gt; type(t)&lt;class &apos;tuple&apos;&gt; 在Python中，元组数据类型英文称作：“ tuple ”。 相关的方法等示例展示，均以Python的交互式环境演示为主！ 元组数据类型的特性 任意对象的有序集合； 通过索引下标访问元素（第一个索引是0，第二个索引是1，依次类推）； 长度固定，任意类型，任意嵌套； 属于不可变类型； 元组数据类型的声明方式 使用基本形式括号 ( ) 定义 123&gt;&gt;&gt; t = (&apos;a&apos;, 1, 2, &apos;hello&apos;)&gt;&gt;&gt; type(t)&lt;class &apos;tuple&apos;&gt; tuple( ) 使用 tuple 构造函数构造元组 123&gt;&gt;&gt; t = tuple(&apos;abc&apos;)&gt;&gt;&gt; t(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) 值得注意的是，当需要声明只有单个元素的元组时，”,”英文逗号不可缺少 12345&gt;&gt;&gt; t = (&apos;a&apos;,)&gt;&gt;&gt; t(&apos;a&apos;,)&gt;&gt;&gt; type(t)&lt;class &apos;tuple&apos;&gt; 基本操作 + 元组之间的连接组合 12345&gt;&gt;&gt; t1 = (1, 2, 3)&gt;&gt;&gt; t2 = (&apos;a&apos;, &apos;b&apos;)&gt;&gt;&gt; t3 = t1 + t2&gt;&gt;&gt; t3(1, 2, 3, &apos;a&apos;, &apos;b&apos;) * 重复操作，元组内元素的重复 123&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;)&gt;&gt;&gt; t * 2(&apos;a&apos;, &apos;b&apos;, &apos;a&apos;, &apos;b&apos;) len( ) 计算元组长度（相当于元组内元素个数） 123&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;)&gt;&gt;&gt; len(t)2 [ ] 通过索引获取元组内指定索引处的元素 123&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;)&gt;&gt;&gt; t[1]&apos;b&apos; tuple[x:y:z] 元组的切片操作（索引由左至右，从0开始）x：为切片起始索引y：为切片结束索引（结果不包含y索引位置的值）z：切片操作的步长 1234567891011&gt;&gt;&gt; t = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)&gt;&gt;&gt; t[3:5](4, 5)&gt;&gt;&gt; t[-1]10&gt;&gt;&gt; t[:](1, 2, 3, 4, 5, 6, 7, 8, 9, 10)&gt;&gt;&gt; t[::2](1, 3, 5, 7, 9)&gt;&gt;&gt; t[::-1](10, 9, 8, 7, 6, 5, 4, 3, 2, 1) in 成员运算符 - 判断指定元素是否存在于元组内，存在则为 True， 反之为 False 12345&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;)&gt;&gt;&gt; &apos;a&apos; in tTrue&gt;&gt;&gt; &apos;x&apos; in tFalse not in 成员运算符 - 判断指定元素是否存在于元组内，不存在则为 True， 反之为 False 12345&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;)&gt;&gt;&gt; &apos;x&apos; not in tTrue&gt;&gt;&gt; &apos;a&apos; not in tFalse 元组数据类型的常见内建函数 index( ) 从元组中找出某个值第一个匹配项的索引位置（可指定寻找的起止索引位置） 123456789&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;, 1, &apos;c&apos;, 2, 3)&gt;&gt;&gt; t.index(&apos;b&apos;)1&gt;&gt;&gt; t.index(&apos;b&apos;, 2, 4)Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;ValueError: tuple.index(x): x not in tuple&gt;&gt;&gt; t.index(&apos;b&apos;, 1, 4)1 count( ) 统计元组中某元素出现的次数 1234567&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;, &apos;a&apos;, &apos;c&apos;, &apos;b&apos;)&gt;&gt;&gt; t.count(&apos;a&apos;)2&gt;&gt;&gt; t.count(&apos;b&apos;)2&gt;&gt;&gt; t.count(&apos;c&apos;)1 更多关于元组数据类型的内建函数方法，可在 Python 交互式环境下，使用：help(tuple) 进行查看，或查阅官方文档：Python 官方文档。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python3 列表]]></title>
      <url>%2FPython3-%E5%88%97%E8%A1%A8%2F</url>
      <content type="text"><![CDATA[–本篇主要讲述 Python数据类型之：列表– “优雅” “明确” “简单”Python Python中的数据类型：列表。并且列表数据类型支持原位改变。以方括号 [ ] 括起来，每个数据之间使用英文的逗号 ‘,’ 进行分隔的形式书写的字面值在Python中为列表数据类型。形如：123&gt;&gt;&gt; L = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, 1, 2, 3]&gt;&gt;&gt; type(L)&lt;class &apos;list&apos;&gt; 在Python中，列表数据类型英文称作：“ list ”。 相关的方法等示例展示，均以Python的交互式环境演示为主！ 列表数据类型的特性 任意对象的有序集合； 通过索引下标访问元素（第一个索引是0，第二个索引是1，依次类推）； 可变长度； 属于可变序列； 列表数据类型的声明方式 使用基本形式方括号 [ ] 定义 123&gt;&gt;&gt; L = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, 1, 2, 3]&gt;&gt;&gt; type(L)&lt;class &apos;list&apos;&gt; list( ) 使用 list 构造函数构造列表 12345678910&gt;&gt;&gt; l = list((&apos;xyz&apos;, &apos;abc&apos;))&gt;&gt;&gt; l[&apos;xyz&apos;, &apos;abc&apos;]&gt;&gt;&gt; type(l)&lt;class &apos;list&apos;&gt;&gt;&gt;&gt; L = list(&apos;abc&apos;)&gt;&gt;&gt; L[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&gt;&gt;&gt; type(L)&lt;class &apos;list&apos;&gt; 列表推导 12345&gt;&gt;&gt; l = [x**2 for x in range(5)]&gt;&gt;&gt; l[0, 1, 4, 9, 16]&gt;&gt;&gt; type(l)&lt;class &apos;list&apos;&gt; 基本操作 + 加法操作，列表之间的组合 1234&gt;&gt;&gt; L = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&gt;&gt;&gt; l = [1,2,3]&gt;&gt;&gt; L + l[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, 1, 2, 3] * 重复操作，列表内元素的重复 123&gt;&gt;&gt; L = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&gt;&gt;&gt; L * 5[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;] len( ) 计算列表长度（相当于列表内元素个数） 123&gt;&gt;&gt; L = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&gt;&gt;&gt; len(L)3 [ ] 通过索引获取列表内指定索引处的元素 123&gt;&gt;&gt; L = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&gt;&gt;&gt; L[1]&apos;b&apos; list[x:y:z] 列表的切片操作（索引由左至右，从0开始）x：为切片起始索引y：为切片结束索引（结果不包含y索引位置的值）z：切片操作的步长 1234567891011&gt;&gt;&gt; L = [1,2,3,4,5,6,7,8,9,10]&gt;&gt;&gt; L[3:5][4, 5]&gt;&gt;&gt; L[-1]10&gt;&gt;&gt; L[:][1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&gt;&gt;&gt; L[::2][1, 3, 5, 7, 9]&gt;&gt;&gt; L[::-1][10, 9, 8, 7, 6, 5, 4, 3, 2, 1] in 成员运算符 - 判断指定元素是否存在于列表内，存在则为 True， 反之为 False 12345&gt;&gt;&gt; L = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&gt;&gt;&gt; &apos;a&apos; in LTrue&gt;&gt;&gt; &apos;x&apos; in LFalse not in 成员运算符 - 判断指定元素是否存在于列表内，不存在则为 True， 反之为 False 12345&gt;&gt;&gt; L = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&gt;&gt;&gt; &apos;x&apos; not in LTrue&gt;&gt;&gt; &apos;a&apos; not in LFalse 列表数据类型的常见内建函数 append( ) 在列表末尾添加新的对象 123456789&gt;&gt;&gt; l = [&apos;a&apos;, &apos;b&apos;]&gt;&gt;&gt; l.append(&apos;c&apos;)&gt;&gt;&gt; l[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&gt;&gt;&gt; l = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&gt;&gt;&gt; b = [1, 2, 3]&gt;&gt;&gt; l.append(b)&gt;&gt;&gt; l[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, [1, 2, 3]] clear( ) 清空列表中所有的元素 1234&gt;&gt;&gt; l = [&apos;a&apos;, 1, 2, &apos;b&apos;]&gt;&gt;&gt; l.clear()&gt;&gt;&gt; l[] copy( ) 复制列表 123456&gt;&gt;&gt; l = [&apos;a&apos;, 1, 2, &apos;b&apos;]&gt;&gt;&gt; s = l.copy()&gt;&gt;&gt; s[&apos;a&apos;, 1, 2, &apos;b&apos;]&gt;&gt;&gt; l[&apos;a&apos;, 1, 2, &apos;b&apos;] count( ) 统计列表中某元素出现的次数 1234567&gt;&gt;&gt; l = [&apos;a&apos;, &apos;b&apos;, &apos;a&apos;, &apos;c&apos;, &apos;b&apos;]&gt;&gt;&gt; l.count(&apos;a&apos;)2&gt;&gt;&gt; l.count(&apos;b&apos;)2&gt;&gt;&gt; l.count(&apos;c&apos;)1 extend( ) 在列表末尾一次性追加另一个序列中的多个值（可用新列表扩展原来的列表） 12345&gt;&gt;&gt; l = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&gt;&gt;&gt; b = [1, 2, 3]&gt;&gt;&gt; l.extend(b)&gt;&gt;&gt; l[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, 1, 2, 3] index( ) 从列表中找出某个值第一个匹配项的索引位置（可指定寻找的起止索引位置） 123456789&gt;&gt;&gt; l = [&apos;a&apos;, &apos;b&apos;, 1, &apos;c&apos;, 2, 3]&gt;&gt;&gt; l.index(&apos;b&apos;)1&gt;&gt;&gt; l.index(&apos;b&apos;, 2, 4)Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;ValueError: &apos;b&apos; is not in list&gt;&gt;&gt; l.index(&apos;b&apos;, 1, 4)1 insert( ) 在列表中的指定位置处，插入某个对象 1234&gt;&gt;&gt; l = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;]&gt;&gt;&gt; l.insert(1, [1, 2, 3])&gt;&gt;&gt; l[&apos;a&apos;, [1, 2, 3], &apos;b&apos;, &apos;c&apos;, &apos;d&apos;] pop( ) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值 12345678910111213&gt;&gt;&gt; l = [1, 2, 3, 4, 5]&gt;&gt;&gt; p = l.pop()&gt;&gt;&gt; p5&gt;&gt;&gt; l[1, 2, 3, 4]&gt;&gt;&gt; s = l.pop(2)&gt;&gt;&gt; s3&gt;&gt;&gt; l[1, 2, 4]&gt;&gt;&gt; l.pop(1)2 remove( ) 移除列表中某个值的第一个匹配项 1234&gt;&gt;&gt; l = [&apos;hello&apos;, &apos;new year&apos;, &apos;all world&apos;, &apos;new year&apos;]&gt;&gt;&gt; l.remove(&apos;new year&apos;)&gt;&gt;&gt; l[&apos;hello&apos;, &apos;all world&apos;, &apos;new year&apos;] reverse( ) 反向重新排序列表中元素 1234&gt;&gt;&gt; l = [1, &apos;hello&apos;, &apos;new year&apos;, &apos;all world&apos;, &apos;new year&apos;, 10]&gt;&gt;&gt; l.reverse()&gt;&gt;&gt; l[10, &apos;new year&apos;, &apos;all world&apos;, &apos;new year&apos;, &apos;hello&apos;, 1] sort( ) 对列表进行排序（也可在排序后进行反向排序） 12345678&gt;&gt;&gt; l = [9, 1, 2, 6, 100, 3, 7, 5]&gt;&gt;&gt; l.sort()&gt;&gt;&gt; l[1, 2, 3, 5, 6, 7, 9, 100]&gt;&gt;&gt; l = [9, 1, 2, 6, 100, 3, 7, 5]&gt;&gt;&gt; l.sort(reverse=True)&gt;&gt;&gt; l[100, 9, 7, 6, 5, 3, 2, 1] 更多关于列表数据类型的内建函数方法，可在 Python 交互式环境下，使用：help(list) 进行查看，或查阅官方文档：Python 官方文档。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python3 字符串]]></title>
      <url>%2FPython3-%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
      <content type="text"><![CDATA[–本篇主要讲述 Python数据类型之：字符串– “优雅” “明确” “简单”Python Python中的数据类型：字符串。并且字符串类型不支持原位改变。以引号括起来进行书写的字面值在Python中为字符串类型。 Python2中，普通字符串是以8位ASCII码进行存储的，而Unicode字符串则存储为16位unicode字符串，这样能够表示更多的字符集。使用的语法是在字符串前面加上前缀 u 表示 Unicode 字符串。Python3中，所有的字符串默认都是Unicode字符串。 相关的方法等示例展示，均以Python的交互式环境演示为主！ 有关四种不同形式的字符串声明 单引号 （使用单引号保留原字符串内的双引号而无需转换） 12&gt;&gt;&gt; print(&apos;happy &quot;new&quot; year&apos;)happy &quot;new&quot; year 双引号 （使用双引号保留原字符串内的单引号而无需转换） 12&gt;&gt;&gt; print(&quot;happy &apos;new&apos; year&quot;)happy &apos;new&apos; year 三引号 （允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。） 1234567891011&gt;&gt;&gt; para_str = &quot;&quot;&quot;这是一个多行字符串的实例···多行字符串可以使用制表符···TAB ( \t )。···也可以使用换行符 [ \n ]。···&quot;&quot;&quot;&gt;&gt;&gt; print(para_str)这是一个多行字符串的实例多行字符串可以使用制表符TAB ( )。也可以使用换行符 [ ]。 以 r 开头声明的原始字符串 （原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。） 12345&gt;&gt;&gt; path = r&apos;c:\abc\xyz.txt&apos;&gt;&gt;&gt; path&apos;c:\\abc\\xyz.txt&apos;&gt;&gt;&gt; print(path)c:\abc\xyz.txt Python字符串中的一些特殊字符使用反斜杠 \ 转义，常用的转义字符如下表 转义字符 实际输出结果 \\ \ 反斜杠符号 \&#39; &#39; 单引号 \&quot; &quot; 双引号 \n 换行符 \b 退格(Backspace) \t 制表符（四空格） \r 回车 \a 系统响铃 基本操作 + 加法操作，字符串连接 12&gt;&gt;&gt; &apos;abc&apos; + &apos;xyz&apos;&apos;abcxyz&apos; * 重复操作，重复输出字符串 12&gt;&gt;&gt; &apos;ok&apos; * 5&apos;okokokokok&apos; len( ) 计算长度 12&gt;&gt;&gt; len(&apos;ok&apos;)2 [ ] 通过索引获取字符串中对应索引处的字符 12345&gt;&gt;&gt; s = &apos;hello python&apos;&gt;&gt;&gt; s[0]&apos;h&apos;&gt;&gt;&gt; s[-1]&apos;n&apos; str[x:y:z] 切片操作（索引由左至右，从0开始）x：为切片起始索引y：为切片结束索引（结果不包含y索引位置的值）z：切片操作的步长 1234567891011&gt;&gt;&gt; s = &apos;my name is python w&apos;&gt;&gt;&gt; s[3:7]&apos;name&apos;&gt;&gt;&gt; s[-1]&apos;w&apos;&gt;&gt;&gt; s[:]&apos;my name is python w&apos;&gt;&gt;&gt; s[::2]&apos;m aei yhnw&apos;&gt;&gt;&gt; s[::-1]&apos;w nohtyp si eman ym&apos; ord( ) 与 chr( ) 字母与数字对应转化 1234&gt;&gt;&gt; ord(&apos;c&apos;)99&gt;&gt;&gt; chr(99)&apos;c&apos; in 成员运算符 - 如果字符串中包含给定的字符返回 True 123&gt;&gt;&gt; s = &apos;hello python&apos;&gt;&gt;&gt; &apos;python&apos; in sTrue not in 成员运算符 - 如果字符串中不包含给定的字符返回 True 123&gt;&gt;&gt; s = &apos;hello python&apos;&gt;&gt;&gt; &apos;python&apos; not in sFalse 字符串类型的常见内建函数 replace( ) 替换字符串 （字符串不支持原位改变，替换后结果需重新赋值给新变量）。 123&gt;&gt;&gt; s = &quot;hello world&quot;&gt;&gt;&gt; s.replace(&apos;o&apos;, &apos;k&apos;)&apos;hellk wkrld&apos; split() 以给定字符为分隔符截取字符串，可指定分割次数。分割结果以列表数据类型返回。 12345&gt;&gt;&gt; s = &quot;hello world&quot;&gt;&gt;&gt; s.split(&apos;o&apos;)[&apos;hell&apos;, &apos; w&apos;, &apos;rld&apos;]&gt;&gt;&gt; s.split(&apos;o&apos;,1)[&apos;hell&apos;, &apos; world&apos;] capitalize( ) 将字符串首字母转化为大写。 123&gt;&gt;&gt; s = &apos;hello world&apos;&gt;&gt;&gt; s.capitalize()&apos;Hello world&apos; startswith( ) 判断字符串开始，返回结果为 True 或 False。 12345&gt;&gt;&gt; s = &apos;hello world&apos;&gt;&gt;&gt; s.startswith(&apos;he&apos;)True&gt;&gt;&gt; s.startswith(&apos;kk&apos;)False endswith( ) 判断字符串结尾，返回结果为 True 或 False。 12345&gt;&gt;&gt; s = &apos;hello world&apos;&gt;&gt;&gt; s.endswith(&apos;ld&apos;)True&gt;&gt;&gt; s.endswith(&apos;oo&apos;)False count( ) 统计指定字符出现的频率，也可（根据索引）指定统计起止位置。 12345&gt;&gt;&gt; s = &apos;hello world&apos;&gt;&gt;&gt; s.count(&apos;o&apos;)2&gt;&gt;&gt; s.count(&apos;o&apos;, 0, 5)1 find( ) 统计指定字符出现的频率，也可（根据索引）指定查找起止范围。 12345&gt;&gt;&gt; s = &apos;hello world&apos;&gt;&gt;&gt; s.count(&apos;o&apos;)2&gt;&gt;&gt; s.count(&apos;o&apos;, 0, 5)1 format( ) 字符串格式化，使用 format 内传递的内容格式化字符串内指定位置。 12345&gt;&gt;&gt; a = &apos;&#123;&#125; hello python &#123;&#125;&apos;&gt;&gt;&gt; a.format(&apos;abc&apos;,&apos;xyz&apos;)&apos;abc hello python xyz&apos;&gt;&gt;&gt; &apos;&#123;&#125;ello &#123;&#125;ython&apos;.format(&apos;h&apos;, &apos;p&apos;)&apos;hello python&apos; isalnum( ) 判断字符串是否只包含字母或数字，是则返回 True，否则返回 False。 123456&gt;&gt;&gt; s = &apos;hello python 3&apos;&gt;&gt;&gt; s.isalnum()False&gt;&gt;&gt; s = &apos;hellopython3&apos;&gt;&gt;&gt; s.isalnum()True isalpha( ) 判断字符串是否只包含字母，是则返回 True，否则返回 False。 123456&gt;&gt;&gt; s = &apos;hello python 3&apos;&gt;&gt;&gt; s.isalpha()False&gt;&gt;&gt; s = &apos;hellopython&apos;&gt;&gt;&gt; s.isalpha()True isdigit( ) 判断字符串是否只包含数字，是则返回 True，否则返回 False。 123456&gt;&gt;&gt; s = &apos;3.6&apos;&gt;&gt;&gt; s.isdigit()False&gt;&gt;&gt; s = &apos;36&apos;&gt;&gt;&gt; s.isdigit()True islower( ) 判断字符串中的所有字母是否为小写，是则返回 True，否则返回 False。 123456&gt;&gt;&gt; s = &apos;a36a&apos;&gt;&gt;&gt; s.islower()True&gt;&gt;&gt; s = &apos;a36A&apos;&gt;&gt;&gt; s.islower()False isupper( ) 判断字符串中的所有字母是否为大写，是则返回 True，否则返回 False。 123456&gt;&gt;&gt; s = &apos;A36A&apos;&gt;&gt;&gt; s.isupper()True&gt;&gt;&gt; s = &apos;A36a&apos;&gt;&gt;&gt; s.isupper()False lower( ) 将字符串中的所有字母转换为小写。 123&gt;&gt;&gt; s = &apos;HELLO PYTHON 3.6&apos;&gt;&gt;&gt; s.lower()&apos;hello python 3.6&apos; upper( ) 将字符串中的所有字母转换为大写。 123&gt;&gt;&gt; s = &apos;hello python 3.6&apos;&gt;&gt;&gt; s.upper()&apos;HELLO PYTHON 3.6&apos; swapcase( ) 将字符串中的所有字母：大写转换为小写，小写转换为大写。 123&gt;&gt;&gt; s = &apos;hello python, HELLO PYTHON&apos;&gt;&gt;&gt; s.swapcase()&apos;HELLO PYTHON, hello python&apos; join( ) 以字符串本身作为分隔符，将 join 函数内部迭代器的所有元素进行拼接。 123456&gt;&gt;&gt; s = &apos;hello&apos;&gt;&gt;&gt; L = [&apos;Today &apos;, &apos; python &apos;, &apos; world&apos;]&gt;&gt;&gt; s.join(L)&apos;Today hello python hello world&apos;&gt;&gt;&gt; &apos;.&apos;.join([&apos;www&apos;, &apos;python&apos;, &apos;org&apos;])&apos;www.python.org&apos; lstrip( ) 去除字符串起始处的空格。 123&gt;&gt;&gt; s = &apos; hello python &apos;&gt;&gt;&gt; s.lstrip()&apos;hello python &apos; rstrip( ) 去除字符串结尾处的空格。 123&gt;&gt;&gt; s = &apos; hello python &apos;&gt;&gt;&gt; s.rstrip()&apos; hello python&apos; strip( ) 去除开头儿和结尾的空格（相当于同时执行了：lstrip( ) 和 rstrip( )） 123&gt;&gt;&gt; s = &apos; hello python &apos;&gt;&gt;&gt; s.strip()&apos;hello python&apos; 更多关于字符串数据类型的内建函数方法，可在 Python 交互式环境下，使用：help(str) 进行查看，或查阅官方文档：Python 官方文档。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python3 数字]]></title>
      <url>%2FPython3-%E6%95%B0%E5%AD%97%2F</url>
      <content type="text"><![CDATA[–本篇主要讲述 Python数据类型之：数字– “优雅” “明确” “简单”Python Python中的数字数据类型用于存储数值。常见的就如我们数学中所使用的数字等。 在Python中，数字数据类型不支持原位改变，要改变变量的数字数据类型，只能通过重新复制来改变，而原数据本身是不被改变的。 相关的方法等示例展示，均以Python的交互式环境演示为主！ Python 支持三种不同的数值类型 整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。 浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250） 复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。 Decimal 数据类型，需要使用模块decimal，引入：import decimal。使用如：123&gt;&gt;&gt; import decimal&gt;&gt;&gt; decimal.Decimal(&apos;1.1&apos;) + decimal.Decimal(&apos;2.2&apos;)Decimal(&apos;3.3&apos;) 常见的进制有： 十六进制：以 0x 开头表示 八进制：以 0o 开头表示 二进制：以 0b 开头表示 各进制转换 hex( ) 转换为十六进制 oct( ) 转换为八进制 bin( ) 转换为二进制123456&gt;&gt;&gt; oct(64)&apos;0o100&apos;&gt;&gt;&gt; hex(64)&apos;0x40&apos;&gt;&gt;&gt; bin(64)&apos;0b1000000&apos; Python 数字类型转换有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。 int(x) 将x转换为一个整数。 12&gt;&gt;&gt; int(1.1)1 float(x) 将x转换到一个浮点数。 12&gt;&gt;&gt; float(1)1.0 complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。 12&gt;&gt;&gt; complex(1)(1+0j) complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。 12&gt;&gt;&gt; comlex(1, 2)(1+2j) 基本的格式化使用&quot;&quot;.format()，例如保留两位小数，如下： 123&gt;&gt;&gt; f = 3.33333&gt;&gt;&gt; &quot;f = &#123;0:.2f&#125;&quot;.format(f)&apos;f = 3.33&apos; 数字类型的比较，返回结果为：True 或 False有： &gt; 大于 &lt; 小于 &gt;= 大于等于 &lt;= 小于等于 == 等于 != 不等于 例：12&gt;&gt;&gt; 1 &gt; 2False 数字数据类型的的运算计算结果保留类型以精度高的数据类型为准。 加法: + 12&gt;&gt;&gt; 1 + 12 减法：- 12&gt;&gt;&gt; 2 - 11 乘法：* 123&gt;&gt;&gt; 2 * 24&gt;&gt;&gt; 2 * 2.0 除法：/ （该计算结果保留小数） 12&gt;&gt;&gt; 3 / 21.5 整除：// （该计算结果只保留整数部分） 1234&gt;&gt;&gt; 3 / 21&gt;&gt;&gt; 3 / 2.01.0 取余：% （返回除法的余数） 12&gt;&gt;&gt; 9 / 45 幂运算：** （幂数运算） 12&gt;&gt;&gt; 5 ** 3125 小数部分操作相关的方法 floor( ) 在数字坐标轴中，向左取整（使用前需要先导入：import math） 12345678&gt;&gt;&gt; math.floor(3.4)3&gt;&gt;&gt; math.floor(3.9)3&gt;&gt;&gt; math.floor(-3.4)-4&gt;&gt;&gt; math.floor(-3.9)-4 trunc( ) 在数字坐标轴中，从两边向中间（坐标原点数字0处）取整（使用前需要先导入：import math） 12345678&gt;&gt;&gt; math.trunc(3.14)3&gt;&gt;&gt; math.trunc(3.94)3&gt;&gt;&gt; math.trunc(-3.14)-3&gt;&gt;&gt; math.trunc(-3.94)-3 全局函数 round 四舍五入： 12345678&gt;&gt;&gt; round(3.4)3&gt;&gt;&gt; round(3.9)4&gt;&gt;&gt; round(-3.4)-3&gt;&gt;&gt; round(-3.9)-4 一些数学常量 pi 圆周率 123&gt;&gt;&gt; import math&gt;&gt;&gt; math.pi3.141592653589793 e 数学常量 e，e即自然常数（自然常数） 有关更多数学计算等需求的，可详阅官方文档：Python 官方文档。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python3 环境]]></title>
      <url>%2FPython3-%E7%8E%AF%E5%A2%83%2F</url>
      <content type="text"><![CDATA[–本篇主要讲述 Python的环境– “优雅” “明确” “简单”Python 简要： 以介绍Python的基本安装，和编写Python的一些基本工具的使用和介绍。 Python3 环境搭建 安装请访问官网自行下载Python3的安装包：Python 官网。 注意：请下载Python3.0以上版本，因为我们讲述的是基于Python3的内容!请下载Python3.0以上版本，因为我们讲述的是基于Python3的内容!请下载Python3.0以上版本，因为我们讲述的是基于Python3的内容! 截至本文编写完毕时，当前Python3的最新版本为：3.6.1 安装过程中，可根据需要，自行更改安装位置，但是有一点，请务必勾选一个选项： “Add Python3.6 to PATH” 这个选项是将Python添加至环境变量，便于在命令行中启用Python命令提示符。 附简略安装截图： 校验启用Win操作系统的命令提示符，输入python可校验，安装成功如下图： Python3 IDE工具 基本的Python环境搭建完毕后，接下来便是编写Python的程序。 大多数的编程语言都有着各式各样的编程工具，大多也都是以IDE著称。 那么什么是IDE呢： IDE 集成开发环境（Integrated Development Environment，简称IDE，也称为Integration Design Environment、Integration Debugging Environment） 简言之即为：辅助程序开发人员开发软件的应用软件，在开发工具内部就可以辅助编写源代码文本、并编译打包成为可用的程序，有些甚至可以设计图形接口。 然而由于Python的语言较为简单易学易用，对于大牛来说，可能一个简单的记事本便可搞定基本的Python开发。但是毕竟还是有局限的，所以这里推荐几款在日后我们编写Python的过程中常用或者说比较好用的几款工具，供大家参考和学习。 Sublime Text PyCharm Sublime TextSublime Text是一个插件丰富支持多种语言的编辑器。当前版本最新的叫：Sulime Text3 而且我个人也推荐使用 Sublime Text3 版本，至于 Sublime Text2还是不建议使用的，因为 Sublime Text2 中集成的是 Python 2.7的版本，并不适用我们使用的 Python3。 上面已经给出了官网地址，可自行前往下载并安装使用。 安装完毕后，为了更好的使用 Sublime Text3 编写 Python 程序，有一些插件还是要推荐给大家安装的： Package Control 【Sublime中插件管理工具】 SideBarEnhancements 【Sublime侧边栏扩展工具】 AutoPEP8 【Python编码pep8规范】 SublimeREPL 【可在Sublime中直接运行Python环境】 Anaconda 【自动匹配关键字等实用功能】 更多可用插件可自行查阅相关资料，这里就不一一赘述了。 结语 有关基本Python的环境以及IDE工具介绍就到此为止了，其实工具有很多，重要是的Python代码使用的熟练度和实际项目经验。最后记录相关更多的资料和工具推荐，可详见参考部分。 参考 Python 官网Sublime Text 官网PyCharm 官网ATOM 官网Notepad++ 官网Package Control 官网 Sublime Text的插件管理工具]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python3 简明纲领]]></title>
      <url>%2FPython3-%E7%AE%80%E6%98%8E%E7%BA%B2%E9%A2%86%2F</url>
      <content type="text"><![CDATA[–本篇为Python3教程的简要纲领– “优雅” “明确” “简单”Python 为了学习Python，摸爬滚打在各种论坛和mooc网教程中，我们通常会看到这么一句话：“人生苦短，我用Python”。其实作为学习Python以及使用这么久的我来说，Python 是很容易入门和掌握的：对于一个深耕技术领域的大牛来说，学习 Python 甚至只需要花费半天的时间就可以；对于一个技术小白，即使连代码从未接触过的人来说，入门Python也仅仅只需不到一周的时间而已。 那么究竟哪门开发语言适合作为初学者的入门语言呢？这里我也不做过多的阐述，毕竟不同的技术出身的大牛会说出各种道理，被推荐为初学者入门语言的也是各种都有。单就我的学习过程和经历来说，是建议从Python学习开始入门的。但不论学什么，重要的是，一旦决定要学习，就要拿出时间、精力认真的学习，端正态度，静下心学下去才能够有收获。 开篇 Python的故事Python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。之所以选中Python作为程序的名字，是因为他是BBC电视剧——蒙提·派森的飞行马戏团（Monty Python’s Flying Circus）的爱好者。ABC是由吉多参加设计的一种教学语言。就吉多本人看来，ABC这种语言非常优美和强大，是专门为非专业程序员设计的。但是ABC语言并没有成功，究其原因，吉多认为是非开放造成的。吉多决心在Python中避免这一错误，并获取了非常好的效果，完美结合了C和其他一些语言 就这样，Python在吉多手中诞生了。实际上，第一个实现是在Mac机上。可以说，Python是从ABC发展起来，主要受到了Modula-3（另一种相当优美且强大的语言，为小型团体所设计的）的影响。并且结合了Unix shell和C的习惯。目前吉多仍然是Python的主要开发者，决定整个Python语言的发展方向。Python社区经常称呼他是仁慈的独裁者。 Python的版本Python当前有很多版本，目前使用最多的可能是以下两个版本： Python 2.7 Python 3.5 而通常情况下，人们把Python的3.*版本统称为了Python3，相对于Python3.0之前的早期版本，这是一个较大的升级。为了不带入过多的累赘，Python 3.0在设计的时候没有考虑向下兼容。因此在学习过程中，很多人也许会遇到很多的问题，其中就有兼容问题，而有些文献上也有如何让 Python2.7 升到 Python3。 我们这里主要讲述的内容也是 Python3 的内容，而非 Python2.7。尽管当前还有不少项目似乎基于 Python2.7。但是我相信，我们的技术是要不断的向前发展的，只有不断的前进才能拥抱无限的未来，因此在未来Python3也一定是大势所趋。 切记：本文要讲述的是 Python3！ Python3！ Python3！ 纲领 以下是本Python3 学习的纲领，不定期更新： Python3 环境 Python3 数字 Python3 字符串 Python3 列表 Python3 元组 Python3 字典表 尚未更新 Python3 文件 尚未更新 Python3 集合 尚未更新 Python3 Boolean 尚未更新 Python3 函数 尚未更新 Python3 类 尚未更新 寄语 以上都是我通过自学，看官网资料，不断积累，遇坑解决，不断摸索、尝试、实践出来的。相信你也可以，一步一步的掌握Python，最终化为自己的知识为你所用。 让我们一起共勉： 持续不断地学习，是更好的成长 —TyouSF]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[HTTP简述]]></title>
      <url>%2FHTTP%E7%AE%80%E8%BF%B0%2F</url>
      <content type="text"><![CDATA[超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协议。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。 ————维基百科 为什么要了解HTTP呢因为 HTTP 是 web 的核心，也是动态 web 应用的核心。理解 HTTP 是理解现代 web 应用如何工作和如何构建的核心。在今后，无论我们是编写 Web 应用，还是进行接口测试等互联网相关的工作，都必须要掌握的基础。 由于仅仅是做相关的简述，至于更多深层次的理论知识，可以参考结果所提供的相关资料进一步了解。 HTTP – 注解 HTTP 是英文：HyperText Transfer Protocol 的缩写，中文释义：超文本传输协议。 更多的解释也可自行谷歌或者百度。 HTTP – 随处可见 在如今这样一个互联网的世界，其实我们每一个人，只要你上网，其实 HTTP 就存在。只是你并没有注意到它而已。此处，我们举一个典型的例子：使用浏览器访问网站。 当你在浏览器地址栏输入 URL 时，请注意网址的开头，通常就是已 http 开头的。为了更容易理解，我们简单的描述一下我们上网的过程： 一个网站的基本构成是由各式各样的文件组成的——诸如CSS，HTML，Javascript，视频文件，图片文件等等 。这些文件被有组织的存放在互联网上的某一台主机（你可以简单粗暴的理解为电脑）上，这个主机有着自己独特的标签（就好比门牌号码一样贴在这台电脑上）来与互联网上其他的计算机设备进行区分。浏览器就是我们与这台电脑进行交流的媒介。现在，我们在浏览器中输入网址访问到这个网址的内容，就好比：我们告诉浏览器说我们要看一下这个网址的内容，于是浏览器就通过互联网找到了这个网址所对应的主机，然后向主机索要内容（这个过程是请求），主机收到浏览器的请求后，根据浏览器的请求，将存放的诸如CSS，HTML，Javascript，视频文件，图片文件等等组织好后，将这些内容以网页的形式返给浏览器（这个过程是响应），最终浏览器把这些内容呈现给了我们。 那么在这个过程中有一个问题：浏览器拿到网址后，他是如何知道该怎么与服务端主机进行沟通交流的呢？ 就好比人与人之间交流使用的是语言一样，他们之间请求和响应的交流，便是通过“HTTP”。至此，相信大家已经简单的明白了什么是“HTTP”：HTTP 是规定了互联网上机器之间彼此交流和沟通的协议。它遵循一个简单的模式：从客户端（使用浏览器访问的这一方）发送一个请求到服务端，服务端进行响应。 因此有人也简单的定义http为：请求&lt; – &gt;响应 协议。 请求：对应英文–&gt; request 响应：对应英文–&gt; response HTTP – Request http 协议规定了基本请求的内容格式，应当包含： 请求行 –&gt; 对应英文：request line 请求头 –&gt; 对应英文：request header 空行 请求数据 –&gt; 对应英文：body 请求行请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本。格式如下：Method Request-URI HTTP-Version CRLF其中 Method表示请求方法；Request-URI是一个统一资源标识符；HTTP-Version表示请求的HTTP协议版本；CRLF表示回车和换行（除了作为结尾的CRLF外，不允许出现单独的CR或LF字符）。 请求方法，常用的几个典型有： GET：向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。 POST：向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。 PUT：向指定资源位置上传其最新内容。 DELETE：请求服务器删除Request-URI所标识的资源 请求头请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。例如Accept-Language: en。常用的请求报头： Accept-Charset 请求报头域用于指定客户端接受的字符集。eg：Accept-Charset:iso-8859-1,gb2312.如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。 Accept-Language 请求报头域类似于Accept，但是它是用于指定一种自然语言。eg：Accept-Language:zh-cn.如果请求消息中没有设置这个报头域，服务器假定客户端对各种语言都可以接受。 Accept-Encoding 请求报头域类似于Accept，但是它是用于指定可接受的内容编码。eg：Accept-Encoding:gzip.deflate.如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。 空行空行是用于分割请求数据的行，且是必须的。即使第四部分的请求数据是空的，也必须有空行分割。 请求数据请求数据也叫主体，可以添加其他的任意数据。 HTTP – Response http 协议规定了基本响应的内容格式，应当包含： 状态行 消息报头 空行 响应正文 状态行由HTTP协议版本号， 状态码， 状态消息 三部分组成。例如：HTTP/1.1 200 OK 有关状态码——由三位数字组成，第一个数字定义了响应的类别，共分五种类别: 1xx：指示信息–表示请求已接收，继续处理 2xx：成功–表示请求已被成功接收、理解、接受 3xx：重定向–要完成请求必须进行更进一步的操作 4xx：客户端错误–请求有语法错误或请求无法实现 5xx：服务器端错误–服务器未能实现合法的请求 常见的诸如：1234200 OK //客户端请求成功403 Forbidden //服务器收到请求，但是拒绝提供服务404 Not Found //请求资源不存在，eg：输入了错误的URL500 Internal Server Error //服务器发生不可预期的错误 消息报头消息报头，用来说明客户端要使用的一些附加信息。通常有：Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html)，编码类型是UTF-8。 空行用于区分正文部分，且是必须的。表示该空行之后的内容均为正文内容。 响应正文空行后面的html部分为响应正文。也可以是单独的图片或者视频文件等。 结语 以上就是HTTP的基本内容，至于更多更深的东西，可以参考其他文献资料，本文并不做过多的解释和说明。但是 HTTP 是整个互联网的核心，所以我个人认为从 HTTP 开始，去学习 web 开发是一个良好的起点。理解 HTTP 中所包含的 GET，POST，会话（Session），cookies 以及HTTP的“无状态”是什么意思更是必不可少的。只有理解 HTTP 的基础，我们才能了解构建一个 web 应用时，其背后究竟发生了什么以及是如何工作的。其中有些东西诸如会话和Cookie等这里没有提及，在以后的文章中我们再行赘述。 参考资料 HTTP 百度百科HTTP 维基百科HTTP 下午茶]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Git常用命令汇总]]></title>
      <url>%2FGit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB%2F</url>
      <content type="text"><![CDATA[自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性分支管理系统Git 简史 Git是什么，就不多介绍了，相关的资料和度娘的解答相信已经多的数不胜数了。本文主要来讲述我们实际工作中常用的一些基本命令以及使用的汇总。具体和详细的教程以及原理的东西可以参考本文最后给出的资料，个人认为这些资料已经足以阐释很多东西了。废话不多说，进入正文：Git常用命令一览！ 在介绍前，先明确两个基本概念（大牛请直接忽略此处）： 本地仓库在你所使用的电脑上进行创建和管理的仓库，我们称之为本地仓库 远程仓库在GitHub网站上托管的仓库，我们称之为远程仓库 代码内须填参数“&lt; &gt;”在代码中凡是用尖括号“&lt; &gt;”括起来的则是需要我们填写的具体参数，实际使用中，尖括号不用书写 origin 代指远程仓库在本地显示的名称如果没有特殊情况，origin代之远程仓库的名称，这是git默认的名称。 Git 基本配置 配置全局git用户名 1git config --global user.name &quot;yourname&quot; 配置全局git用户邮箱地址 1git config --global user.email yourmail@example.com 查看配置信息 1git config --list Git 本地仓库的初始化 将当前所在的根目录文件夹直接变为git仓库 1git init 在当前的路径下，新建一个我们命名的文件夹，并将其初始化为git仓库 1git init foldername Git 提交管理 提交前，查看当前文件状态 1git status 将某一具体的新增或有修改的代码文件添加至暂存区等待提交 1git add filename 将某一具体的已添加至暂存区的文件从暂存区移除 1git reset HEAD filename 批量添加所有新增或有变更的文件至暂存区等待提交 1git add . 将暂存区的文件提交至当前分支，并添加本次提交的注释 1git commit -m &quot;comments for your commit&quot; 撤销刚才的提交并重新编辑注释后再次提交 1git commit --amend 跳过添加暂存区直接进行提交 1git commit -a -m &quot;comments for your commit&quot; 查看提交历史 1git log Git 文件管理 从工作目录中手工删除文件 12rm filename # 移除文件git rm filename # 在暂存区记录此次的移除操作 移动并重命名文件 1git mv file_from file_to Git 本地分支管理 注意事项： 在使用本地分支管理之前，请确保你所创建的本地仓库并不是空的，且有过提交历史，否则可能无法顺利创建分支。 创建新的分支 1git branch &lt;new_branch&gt; 切换到某个分支 1git checkout &lt;branch&gt; 创建新的分支并切换到新建的分支 1git checkout -b &lt;new_branch&gt; 基于现有分支创建新分支并切换过去 1git checkout -b &lt;new_branch&gt; &lt;branch&gt; 查看当前所有分支 1git branch 将某一分支合并到当前分支 1git merge &lt;branch&gt; 查看各个分支最后提交信息 1git branch -v 查看已经被合并到当前分支的分支 1git branch --merged 查看尚未被合并到当前分支的分支 1git branch --no-merged 安全删除分支（如果该分支并未被合并，删除该分支会提示错误，因为那样做会丢失数据） 1git branch -d &lt;branch&gt; 强制删除某个分支（未被合并的分支被删除的时候需要强制） 1git branch -D &lt;branch&gt; 远程仓库管理 给本地仓库添加一个远程仓库 1git remote add &lt;shortname&gt; &lt;url&gt; 修改远程仓库地址 1git remote set-url &lt;shortname&gt; &lt;new_url&gt; 克隆远程仓库到本地新仓库 1git clone &lt;repository_url&gt; 查看当前的远程仓库 1git remote 查看远程仓库状态 1git remote show origin 删除本地添加的远程仓库 1git remote rm &lt;shortname&gt; 重命名本地的远程仓库名 1git remote rename &lt;shortname&gt; &lt;new_shortname&gt; 远程分支管理 首次提交本地分支至远程分支（如无远程主分支则创建，用于初始化远程仓库） 1git push -u origin &lt;branch&gt; 非首次提交至远程分支（默认自动提交至当前本地分支所对应的远程分支） 1git push 抓取远程仓库所有分支更新并合并到本地 1git pull 抓取远程仓库所有分支更新并合并到本地，不要快进合并 1git pull --no-ff 抓取远程仓库更新 1git fetch origin 将远程分支合并到本地当前分支 1git merge (远程仓库名)/(远程分支名) 跟踪某个远程分支创建相应的本地分支 1git checkout --track &lt;origin&gt;/&lt;branch&gt; 删除远程分支，origin是远程仓库名 1git push origin :&lt;branch&gt; 本地分支与远程分支关联 绑定远程和本地分支1git branch --set-upstream &lt;local_branch&gt; &lt;origin&gt;/&lt;origin_branch&gt; SSH公钥 生成 SSH 公钥1ssh-keygen 结语 通过上述的一些命令，我们日常git的使用基本没有什么问题了。但是实际使用过程中可能会遇到诸多的问题，顿时很是疑惑，也不知该如何解决。相信在您使用上一段时间后，肯定会遇到的。这个时候我们要多查找一些官方文档或者资料，多学习多看多实践，相信一定可以得到解决。如果有时间，建议了解一下Git的一些底层和原理性的东西，更能加深我们对Git的理解。 参考资料 Pro Git 简体中文版Git 简易指南Git 实操学习站点]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Appium Demo 下篇]]></title>
      <url>%2FAppium-Demo-%E4%B8%8B%E7%AF%87%2F</url>
      <content type="text"><![CDATA[一个Appium的Demo之旅 TyouSF 本文我们将使用Python语言编写第一个基于Appium的自动化测试脚本。 脚本实际运行效果：在Android模拟器中，自行调用计算器，完成一个简单的数学计算：1+1 编写前必须要声明的注意事项： Appium当前版本为：1.4.16.1由于版本原因，当前该版本最高支持到Android M，及Android 6.0，对应Android API 23 安卓模拟器的创建基于上一条Appium的原因，对7.0以上的Android版本支持不太友好，存在Bug，如果您坚持使用基于7.0以上创建的安卓模拟器，运行过程中可能会遇到各种问题，不建议采用。建议创建一个基于Android 6.0 版本的模拟器，如果您还不知道怎么创建，可详细查阅Appium Demo 上篇 启动Appium运行Appium客户端，并启动Appium服务。启动图如下： 启动Android AVD打开Android Studio启动创建好的安卓模拟器即可 编写Python脚本1234567891011121314151617181920from appium import webdriverdesired_caps = &#123;&#125;desired_caps['platformName'] = 'Android'desired_caps['platformVersion'] = '4.4.2'desired_caps['deviceName'] = 'Android Emulator'desired_caps['appPackage'] = 'com.android.calculator2'desired_caps['appActivity'] = '.Calculator'driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)driver.find_element_by_name("1").click()driver.find_element_by_name("+").click()driver.find_element_by_name("1").click()driver.find_element_by_name("=").click()driver.quit() 执行脚本假设您编写的脚本名称为：demo.py1python demo.py 如果没有异常，运行脚本后，您便可以在Android AVD中看到整个执行过程。就像这样：↓]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Appium Demo 上篇]]></title>
      <url>%2FAppium-Demo-%E4%B8%8A%E7%AF%87%2F</url>
      <content type="text"><![CDATA[Pytho + Android AVD + Appium构建我们的第一个DEMO TyouSF 本篇内容要旨： 主要讲述为了完成我们第一个Demo，所需要完成的基本准备工作。 声明：本Demo主要基于Python语言进行编写，因此，准备工作中的语言库也将围绕Python进行展开。如果您使用的是其他的语言，那么非常抱歉，本文可能并不适合您，建议您通过官网进行相关资料的查询与阅读。 接下来，看看我们都需要哪些吧： Python Python第三方库–Appium Python Client Android AVD（简称安卓模拟器） Python 这是我们基于Python语言编写的基本也是硬性要求了，就不多解释了。另：由于本Demo的编写是基于Pyhon3，安装时请务必选择Python3以上的版本。 有关Python的安装，详细可访问Python 官网进行下载。 友情提示：Win操作系统下，为了获得更好的Python支持，在安装Python时，请务必注意一个选项： Add python to Path 该选项即是将python添加至系统的环境变量中，这样在安装以后，您便可以在命令提示符中直接使用python相关的命令而无须再进行环境变量的配置。如果您安装时没在意，没关系，卸载Python后重新安装即可（重新安装时记得选上噢！）。 Appium Python Client仅仅是安装Python的语言环境是不够的，我们还要安装Appium的支持库。安装很简单，但是在安装前，不得不提的是：由于直接安装，可能会导致您当前Python的语言环境不够纯粹。通常情况下，在使用Python的过程中，为了满足不同的项目需求，需要各种第三方库的支持，为了方便管理也为了保持本身Python语言环境的纯粹，会使用沙盒来进行管理和安装。 沙盒：所谓沙盒环境，是使用Python进行创建的一个基于纯粹Python语言环境下的虚拟环境。在Python中，通常叫做“venv”。安装第三方库便可以在“venv”中进行安装，这样既不会影响我们主题的Python语言环境，也可以为不同的项目创建不同的“venv”环境。 安装Appium Python Client———— 在命令提示符下，使用如下命令创建“venv”： 1python -m venv venv 激活虚拟环境 1venv\Scripts\activate.bat 安装Appium Python Client 1pip install Appium-Python-Client 上述总执行过程类似如下图所示： Android AVD（简称安卓模拟器）由于Demo编写后，需要借助安卓模拟器来展示效果，因此需要安装一下Android AVD。如果您看过上一篇文章Appium 基础的话，相信基本环境已经搭建完毕了。而我们Android AVD的安装便需要用到Android Studio。 启动Android Studio后，参照下图所示的顺序以及说明进行安装即可。 结语 至此，Demo上篇的基本准备工作已经完毕。接下来，让我们一起看看一个Demo是如何编写的吧。开始前，您可以参照下列资料进行一些自行学习和了解： Appium Python ClientPython3 教程]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Appium 基础]]></title>
      <url>%2FAppium%20%E5%9F%BA%E7%A1%80%2F</url>
      <content type="text"><![CDATA[Appium是一个自动化测试开源工具，支持 iOS 平台和 Android 平台上的原生应用，web 应用和混合应用。 Appium TyouSF Appium 介绍 Appium 是一个自动化测试开源工具，支持 iOS 平台和 Android 平台上的原生应用，web 应用和混合应用。 “移动原生应用”是指那些用iOS或者Android SDK写的原生应用。 “移动web应用”是指使用移动浏览器访问的应用。 “混合应用”是指原生代码内嵌H5的形式。比如应用内直接打开网页等。 除此之外，Appium 是一个跨平台的工具：它允许测试人员在不同的平台（iOS，Android）使用同一套API来写自动化测试脚本，这样大大增加了测试套件间代码的复用性。 Appium理念为了满足移动自动化需求，Appium 遵循着一种哲学，主要有以下4条： 你无需为了自动化，而重新编译或者修改你的应用。 你不必局限于某种语言或者框架来写和运行测试脚本。 一个移动自动化的框架不应该在接口上重复造轮子。（移动自动化的接口应该统一） 无论是精神上，还是名义上，都必须开源。 Appium框架Appium真正的工作引擎其实是苹果和谷歌官方提供的测试框架： iOS: 苹果的UIAutomation Android: Google的UiAutomator 将这些框架封装成一套API–WebDriver（也就是 “Selenium WebDriver”） 指定了客户端到服务端的协议。使用这种客户端-服务端的架构，我们可以使用任何语言来编写客户端，向服务端发送恰当的 HTTP 请求。 事实上 WebDriver 已经成为 web 浏览器自动化的标准，也成了 W3C 的标准——W3C Working Draft 概念注解C/S 架构Appium的核心是一个web服务器，它提供了一套接口。它收到客户端的连接，监听到命令，然后在移动设备上按照这些命令执行，然后将执行结果放在HTTP响应中返回给客户端。 SessionSession我们可以理解为一个上下文链接的对象，我们每次执行测试时，客户端初始化一个seesion（会话）来与服务端交互，之后，我们每一次的运行命令，都将通过这个Session进行后续命令的传达（下发）。 Desired CapabilitiesDesired capabilities是一些键值对的集合（就好比Python中的字典表），客户端将这些键值对发给服务端，告诉服务端我们想要怎么测试。其中所涉及的一些数值，比如： platformName: iOS：则是告诉Appium服务端，我们测试的应用是ios 等等诸如此类的，可以在后续我们脚本编写中进行更为详细的了解。 Appium Server是用Node.js编写的一个服务器。也是我们所编写测试脚本命令所要发送给的对象，经由Appium Server再向测试应用的终端发送执行命令。我们可以用源码编译或者从NPM直接安装。 Appium ClientAppium Client即我们使用的客户端，也就是我们编写脚本的支持。涉及Java, Ruby, Python, PHP, JavaScript和C#等实现了Appium对WebDriver协议的扩展的语言。我们使用过程中选择一个适合您当前所掌握的语言即可。 Appium 安装 以下将介绍Appium如何安装，以及相关环境的配置。如果其中有哪些您已经安装过或者配置过，您可自行忽略。另：本文所讲述的安装和配置教程，均是基于Win操作系统，如果您使用的是Mac或其他平台，可查询相关官方文档。 安装清单： JAVA JDK Android Studio Node.js Appium JAVA JDKAndroid是由Java语言开发的，所以想开发Android应用首先需要Java环境。 JAVA JDK 下载地址：Java JDK 安装下载后双击安装文件，进行安装即可，安装时可自行更改安装位置。此处假设您安装时所选路径为：D:\Java。 配置接下来，进行环境变量的设置： “我的电脑”右键菜单—&gt;属性—&gt;高级—&gt;环境变量 添加JAVA_HOME的变量（变量值根据当前你所安装的JDK目录下的实际版本进行填写） 12变量名：JAVA_HOME 变量值：D:\Java\jdk1.8.0_121 添加CLASS_PATH的变量 12变量名：CLASS_PATH变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; 在Path变量中添加如下两个变量值（非Win10操作系统直接添加：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;）： %JAVA_HOME%\bin %JAVA_HOME%\jre\bin 截图参考：↓ 校验设置后，在Win下的命令提示符中验证是否配置成功： 打开Win的命令提示符 输入java -version 展示如下图所示结果，即证明JAVA JDK配置成功 Android Studio有看过其他文章和资料的，相信一定看到过很多需要您安装的，诸如“Android SDK”，“Android ADT”，“Android SDK Platform-Tools”等等很多关于Android环境的安装包。但是其实完全是没有必要的。因为现在最新的Android Studio已经集成上述各种的安装包，无需一一去找和一一安装，我们只需要安装一个最新最全的Android Studio即可。 Android Studio Android Studio是一个为Android平台开发程序的集成开发环境。 维基百科zh.wikipedia.org/wiki/Android_Studio 安装访问Android Studio官网进行下载（https://developer.android.com/studio/index.html?hl=zh-cn） 同样，双击安装包进行安装即可，至于安装路径您可自行更改，这点并不影响。 配置Adb参照下图，添加ANDROID HOME的环境变量，以及对应Path下的变量值： 校验adb在Win命令提示符下，输入adb，如果出现下图所示结果，即证明adb配置成功： Node.js安装访问Nodejs官网nodejs，按照下图所示，点击下载即可。下载完毕后，双击安装包进行安装，安装过程中默认各选项，一直下一步即可。 校验在Win命令提示符下，输入node -v，如果出现下图所示结果，即证明node环境OK： Appium有关Appium的安装，官方首页给出的是使用Node.js进行的安装，但是并不建议使用官方的安装命令，因为在安装过程中，会遇到下载异常问题，而且文件也众多，下载也缓慢。建议点击主页的下载按钮来直接下载。下载后，是一个zip包，我们解压后，里面会有两个文件： appium-installer.exe update.bat 安装我们只需要双击appium-installer.exe，进行安装即可。同样的，至于安装在哪里，这完全随您喜欢。 附上安装截图：↓ 校验通过Appium客户端校验启动Appium，正常启动后，则展示如下： 但是这并不能证明我们的Appium整体环境是否已经搭建成功。接下来，我们在启动Appium后，选择执行Appium按钮之后，如果无异常，应当是如下图所示这样： 通过appium-doctor命令校验如果您在看本篇教程之前，有看过他人写的一些文章的话，您可能会接触到这样一条校验appium环境是否搭建成功的命令：1appium-doctor 关于这条命令，并不是所有人都可以直接执行的。首先如果是通过NPM的命令来安装appium的话，笔者并不是很清楚是否可以执行。但是假设您是跟着本教程通过Win下的安装包完成安装的，那么恭喜您：这条命令您并不能直接在Win的命令提示符下执行。执行的时候Win会提示我们这并不是内部或外部命令。原因： 很简单，安装包完成安装后，并没有进行相关环境变量的配置 那么接下来，我们一起看看如何让appium-doctor成功运行： 寻找“appium-doctor”进入到您安装Appium的目中 –》 会看到有一个文件夹名称为：“node_modules” –》 进入“node_modules”后，会看到有个文件夹名称为：“.bin” –》 进入到“.bin”目录中，您便会发现有一个“appium-doctor.cmd”的文件，恭喜您已经找到了！ 配置“appium-doctor”到环境变量”将步骤1中“appium-doctor.cmd”的目录进行复制，就像这样一个地址：E:\Appium\node_modules.bin（具体按照您实际安装的目录进行修改！）。之后进入系统环境变量的Path中进行添加，如图： Win命令提示符下的校验配置后，在Win命令提示符中输入appium-doctor，如果出现类似下图结果：则证明环境成功搭建完毕。（有任何不成功的，都将会标红并提示出具体还缺少什么环境） 结语 相信只要按照本文所述的顺序，进行基本的环境搭建，都应当不会有太大问题。至此，恭喜正在搭建此环境的你，已经成功开启了Appium之旅。接下来，让我们一起看看如何利用‘Python’语言完成我们第一个自动化测试安卓App的Demo脚本吧！ 相关学习资料如下（坚持学习，您将能够获得更多的收获）： Python3 中文教程Appium 中文文档Android 调试桥]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo博客的SEO]]></title>
      <url>%2FHexo%E5%8D%9A%E5%AE%A2%E7%9A%84SEO%2F</url>
      <content type="text"><![CDATA[好不容易搭建起了第一个属于自己的个人博客站点，然后使用谷歌以及百度搜索自己的博客网站时，突然发现：What?居然搜索不到！！！顿时不禁黯然神伤。。。。。。这个时候，就意味着我们需要对自己的博客，进行SEO！–TyouSF 搜索引擎优化（英语：search engine optimization，缩写为SEO），是一种通过了解搜索引擎的运作规则来调整网站，以及提高目的网站在有关搜索引擎内排名的方式。由于不少研究发现，搜索引擎的用户往往只会留意搜索结果最前面的几个条目，所以不少网站都希望通过各种形式来影响搜索引擎的排序，让自己的网站可以有优秀的搜索排名。当中尤以各种依靠广告维生的网站为甚。 搜索引擎优化维基百科 为什么要SEO 当我们拥有自己的博客站点后，我们当然希望我们自己的博客可以在各种的搜索引擎中能够被搜索到。这样，就会有更多的人知道和了解我们，从而让自己小有名气！可是此时，当我们搭建完毕我们的博客站点后，此时谷歌也好百度也好都是搜索不到的！这是为什么呢？因为我们的站点没有被搜索引擎收录！那么如何解决想必你也知道方法了：那就是让搜索引擎收录我们的站点。如何收录呢？接下来就动起手来，让我们的站点被搜索引擎收录吧！ 注： 本文主要以Google搜索为主进行讲解，有关百度的收录，基本与Google操作一致，各位看官可自行动手实现一下，也当是检测自己的掌握情况！ 本文的优化结果与主题有一定关系，高度适用于使用 NexT 主题进行搭建的 Hexo 博客，其他主题可进行变通 为了描述方便，在以下说明中，将位于站点根目录下，主要包含Hexo本身的配置文件称之为：“站点配置文件”，将位于主题目录下的配置文件称之为：“主题配置文件” 准备工作 安装 sitemap为了能够让我们的站点被收录，我们需要为我们的hexo博客安装相关支持的包。这两个包分别为： hexo-generator-sitemap 【该包用于支持Google搜索引擎】 hexo-generator-baidu-sitemap 【该包用于支持百度搜索引擎】 对应的安装命令如下：12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 了解 sitemapsitemap：中文译为“站点地图” 什么是站点地图？ 站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知 Google 和其他搜索引擎。Googlebot 等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。 此外，站点地图能够提供与其中所列网页相关的宝贵元数据：元数据是网页的相关信息，例如此网页的上次更新时间、更改频率及其重要性（与相应网站中的其他网址相较而言）。 您可以使用站点地图向 Google 提供您网页上特定类型内容（包括视频和图片内容）的元数据。例如，您可以向 Google 提供有关视频和图片内容的信息： 站点地图视频条目可以指定视频的时长、类别和年龄适宜性分级。站点地图图片条目中可包含图片主题、类型和许可。 修改站点配置文件 _config.yml 添加如下的配置（注意每行的空格） 12345# sitemapsitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 找到原URL的部分，并修改为自己的博客网址，如下： 123# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://yoursite.github.io 修改文章链接，在上述步骤2的url下方，找到关键字 permalink，并修改为如下形式： 1permalink: :title/ 在博客根目录中的 source 文件夹下，添加蜘蛛协议 “robots.txt” 的文件，内容如下： 12345678910111213141516User-agent: *Allow: /Allow: /categories/Allow: /tags/Allow: /archives/Allow: /about/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: http://yoursite.github.io/sitemap.xmlSitemap: http://yoursite.github.io/baidusitemap.xml 基于 NexT 主题的首页 title 优化如果恰巧你也使用的是NexT主题，那么可以参照如下的方式进行首页 title 优化。这并非必要，可因个人喜好而自行决定是否修改。 对应修改文件的路径：your-hexo-site/themes/next/layout 下的 index.swig 文件。 找到上述 index.swig 文件中如下的代码片段：1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125; 然后修改其为如下代码：1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125; 如果做了SEO关键字的设定，也期望在首页 title 中显示的话，也可修改为如下的代码：1&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; - &#123;&#123; config.title &#125;&#125;&#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125; 基于 NexT 主题添加 nofollow 标签注：此项也并非必须要修改，非NexT主题也可忽略！！！ nofollow标签是由谷歌领头创新的一个“反垃圾链接”的标签，并被百度、yahoo等各大搜索引擎广泛支持，引用nofollow标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有nofollow属性的任何出站链接，以减少垃圾链接的分散网站权重。 rel这个属性它有许多的属性值，比如next、previous,、chapter、 section等等，比较常见的是 rel=&#39;external nofollow&#39; 与 rel=&#39;nofollow&#39; 两种参数的应用！ rel=&#39;nofollow&#39; 属性是谷歌为了应对垃圾链接而引入的一个属性值，被各大搜索引擎引用！rel=&#39;external nofollow&#39; 只是更相对于 rel=&#39;nofollow&#39; 参数更加规范一些而已！ rel=&#39;external nofollow&#39; 与 rel=&#39;nofollow&#39; 其功能的中文译文为“不要读取”或“外部链接不要读取”的意思！ 第一步：修改 footer.swig 文件 找到位于：your-hexo-site/themes/next/layout/_partials/footer.swig 路径下的 footer.swig文件，打开后，找到如下的代码片段：1&#123;&#123; __(&apos;footer.powered&apos;, &apos;&lt;a class=&quot;theme-link&quot; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&apos;) &#125;&#125; 将其修改为：1&#123;&#123; __(&apos;footer.powered&apos;, &apos;&lt;a class=&quot;theme-link&quot; href=&quot;http://hexo.io&quot; rel=&quot;external nofollow&quot;&gt;Hexo&lt;/a&gt;&apos;) &#125;&#125; 接下来，继续找到如下代码片段：1&lt;a class=&quot;theme-link&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt; 将其修改为：1&lt;a class=&quot;theme-link&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot; rel=&quot;external nofollow&quot;&gt; 第二步：修改 sidebar.swig 文件 找到位于：your-hexo-site/themes/next/layout/_macro/sidebar.swig 路径下的 sidebar.swig文件，打开后，找到如下的代码片段：1&lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot; target=&quot;_blank&quot; title=&quot;&#123;&#123; name &#125;&#125;&quot;&gt; 修改为：1&lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot; target=&quot;_blank&quot; title=&quot;&#123;&#123; name &#125;&#125;&quot; rel=&quot;external nofollow&quot;&gt; 接下来，继续找到如下代码片段：1&lt;a href=&quot;https://creativecommons.org/&#123;% if theme.creative_commons === &apos;zero&apos; %&#125;publicdomain/zero/1.0&#123;% else %&#125;licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0&#123;% endif %&#125;/&quot; class=&quot;cc-opacity&quot; target=&quot;_blank&quot;&gt; 将其修改为：1&lt;a href=&quot;https://creativecommons.org/&#123;% if theme.creative_commons === &apos;zero&apos; %&#125;publicdomain/zero/1.0&#123;% else %&#125;licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0&#123;% endif %&#125;/&quot; class=&quot;cc-opacity&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt; Google 收录 登录 Google Search Console Google 网站站长 添加我们的博客站点 进行验证：验证方式有多种，此处我们以“HTML标记”为例：选择HTML标记后，会有一段代码，我们将代码中的content所对应的值进行复制，找到我们的主题配置文件，找到关键字google_site_verification之后，将我们复制的值粘贴至此处（并取消注释）即可。 重新生成站点（完成上述所有的设定后）使用hexo generate重新生成我们的站点，为了保证有效生成，可在每次生成前，先进行清理：hexo clean。这个时候，我们便可以在Hexo的站点“public”文件夹中发现：sitemap.xml 与 baidusitemap.xml 的两个文件已经生成。 部署新的站点将我们最新配置后并生成的站点（操作4所生成的站点），重新部署至 GitHubPages 上。 部署后，此时在Goole中进行验证（建议部署后等待几十秒，以便部署生效后，再进行验证） 验证成功后，在Google Search Console平台添加我们的站点地图 添加Google抓取：我们以抓取首页为例，直接点击抓取按钮即可看到抓取结果 将抓取通过的地址，进行请求编入索引（我们以博客首页加入抓取索引为例） 编入索引后，打开Google进行搜索（以博主的博客为例，搜索“tyousf”），确认结果： 结语 由于也是各种探索和尝试中进行的，难免有所纰漏，如果有问题，欢迎大家在下方留言处多多指正。 在尝试过程中，博主也是找了很多的资料，其中各种描述，看的也是云里雾绕！经过自己亲自实践后，整编成本文！其中已经做了很多的修正。不过当然要感谢每一个我参考过资料的作者，没有他们的贡献，我也不可能这么快的实现SEO。 总结起来我们必须要做如下的事情进行基本的SEO： 安装 Sitemap 支持的包 配置 sitemap 的代码 修改 URL 为站点地址 优化文章链接 permalink 添加蜘蛛协议 robots.txt 搜索引擎站长网站进行网站收录 验证站点 添加站点地图 添加编入索引 接下来，让我们自己动手，添加百度收录吧！！！附上百度站长平台传送门：百度站长平台 参考资源 sitemapSEO]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo搭建中的问题整合]]></title>
      <url>%2FHexo%E6%90%AD%E5%BB%BA%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E6%95%B4%E5%90%88%2F</url>
      <content type="text"><![CDATA[前序 本文旨在对于Hexo搭建过程中，遇到的一些问题的整理，希望也能帮助正在阅读的你，解决一些疑惑 关于npm命令npm命令安装第三方插件时的执行路径使用过Hexo后，我们会发现，前端页面显示通常仅仅支持了简易的markdown语法，如果要扩展在网页中呈现更高级的markdown语法特性，我们便要去寻找扩展的插件。 幸运的是，Hexo官网已经为我们提供了官网的一些可能会用到的插件，我们需要按照官网的链接去寻找，并按照对应的安装方式进行安装即可，这里附上Hexo官方插件查询地址：Hexo 插件 注意:我们在安装任何第三方的插件库来扩展我们的站点时，请务必在我们的站点根目录下执行相应的安装命令。假设——我们的站点，安装在D盘，名为myblog的文件夹下，我们想要让我们的站点支持页面的脚注功能，对应的插件名为hexo-footnotes,首先启动GitBash，然后我们应当这么执行：123456yourpcname@DESKTOP-OLULDAI MINGW64 ~$ cd d:yourpcname@DESKTOP-OLULDAI MINGW64 /d$ cd myblogyourpcname@DESKTOP-OLULDAI MINGW64 /d/myblog$ npm install hexo-footnotes --save 如果你发现安装的插件不起作用，一定要确认是否是在站点目录下执行的安装命令。 学会利用hexo clean的命令如果你发现，你新修改的主题以及样式，没有展示为最新的，可以使用该命令清除数据之后，再次启动或者重新生成站点后再提交至Git。 使用hexo deploy自动部署遇到问题通常使用自带的部署命令可能会存在一些问题，官方也有提及。所以遇到问题之后，建议回归到Git的本质，来使用原生的Git命令来提交。那么问题来了： 我们该把什么作为我们的博客文件提交至Git呢？ 我们该怎么管理我们本地仓库与远程Git仓库呢？ 第一个问题：其实真正需要我们提交至Git，作为我们博客的文件，是我们hexo搭建的站点跟目录下的public文件夹内的所有文件。每当我们要发布最新的博文时，我们就先使用hexo generate来生成public文件夹。第二个问题：建议通过克隆我们远程的站点仓库，来创建我们的本地站点仓库。假设我们在d盘下执行：1234yourpcname@DESKTOP-OLULDAI MINGW64 ~$ cd d:yourpcname@DESKTOP-OLULDAI MINGW64 /d$ git clone git@github.**.... 执行后，我们本地D盘就会有一个Git仓库，里面存放着我们的远程站点内容。此时我们可以将最新的public文件夹内的所有文件拷贝到这里之后，使用如下命令来完成部署：12345678yourpcname@DESKTOP-OLULDAI MINGW64 /d$ cd yourname.github.ioyourpcname@DESKTOP-OLULDAI MINGW64 /d/yourename.github.io$ git add .yourpcname@DESKTOP-OLULDAI MINGW64 /d/yourename.github.io$ git commit -m &apos;***&apos;yourpcname@DESKTOP-OLULDAI MINGW64 /d/yourename.github.io$ git push 关于Hexo的一些提醒事项：Hexo所搭建的博客是静态的，同时GitHubPages虽然是我们的站点博客，但同时也是公开的，因此： 任何人都可以看到我们博客的仓库原文件，因此，切勿存放以及暴露个人隐私数据； 任何人都可以看到我们博客的仓库原文件，因此，切勿存放以及暴露个人隐私数据； 任何人都可以看到我们博客的仓库原文件，因此，切勿存放以及暴露个人隐私数据；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[GitHub Pages + Hexo & NexT 快速构建静态Blog]]></title>
      <url>%2FGitHub-Pages-Hexo-NexT-%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E9%9D%99%E6%80%81Blog%2F</url>
      <content type="text"><![CDATA[写在本博客搭建完毕之初 本文旨在快速让各位读者拥有属于自己的静态博客，相信纯属小白不懂代码的读者，只要按照如下所述的步骤进行操作，瞬间即可拥有自己的个人免费静态博客。 所涉及到的工具有： Git Node.js Hexo NexT 从GitHub开始，拥有一个不完美的站点有关GitHub尚不清楚的小伙伴，可自行百度，进行更详细的了解。这里只进行简单的介绍和说明： GitHub是一个通过Git进行版本控制的软件源代码托管服务，由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。 维基百科zh.wikipedia.org/wiki/GitHub 注册GitHub访问GitHub主页，进行基本的GitHub账户注册，此时，面前的你可能会面临一个问题————由于国内的“防火长城”，GitHub网站有可能无法访问。有过科学上网经验的小伙伴一定不陌生，使用我们的科学上网姿势，即可访问。如果面前的你对科学上网尚且一无所知，那也没有关系，自行百度“科学上网”，总能找到一款适合您的解决方案。如果你没有更好的选择，那么我个人推荐使用Shadowsocks，打开网站后，切换为中文，按照官网的教程，相信您马上就可以get到科学上网的姿势。 解决墙的问题后，访问GitHub，并完成注册即可。 注册页面见：↓ 快速拥有一个不完美的站点完成注册后，按照下图的顺序，完成各个步骤的操作： 进入到我们的个人资料 进入我们的git仓库 新建一个远程Git代码仓库 新建我们的博客托管仓库此处，我们假设你注册时的github的用户名为：yourname，创建一个yourname.github.io的仓库，具体可参照下图。 创建完毕后，恭喜您，您已经拥有了个人站点，虽然还不完美。 通过在浏览器中输入我们操作4中创建的仓库名，即可访问到。举个例子——我们按照操作4中假设的名称创建的话，那么您访问的地址应当是：https://yourname.github.io/。各位读者只需要把yourname.github.io换成您创建仓库时所填写的对应名称即可。 搭建Hexo，让我们的站点更为完美关于Hexo的搭建，您可以参考Hexo官网，点此→Hexo，阅读更为详细的文档说明。如果您使用的是mac，那么请对照Hexo的官方文档进行搭建，本文主要介绍Windows操作系统上的搭建和使用（请各位读者谅解）。 认识HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Hexo什么是Hexo 环境搭建安装Git看过前面的教程后，大家已经使用过Git，等等，那不是一个网页吗，怎么还需要安装Git了？没错，我们是要安装，原因是，您所访问的是Git的远程仓库托管，但是本地化的Git才是用于我们代码管理的本质，因此我们需要安装一个本地的Git管理工具。 可以访问Git工具的官网Git，和前面所介绍的一样，可能会遇到墙的问题，此处不再细说，可参照前文所写。 登录后，官网点击下载即可，详细如下图：下载完毕后，双击安装包进行安装，安装过程中默认各选项，一直下一步即可。 安装Node.js访问Nodejs官网nodejs，按照下图所示，点击下载即可。下载完毕后，双击安装包进行安装，安装过程中默认各选项，一直下一步即可。 安装Hexo安装完Git后，在桌面空白地方，点击鼠标右键，可发现菜单栏中存在名为Git Bash Here的可选项，我们选择它即可开启我们的git命令行操作界面 选择Git Bash Here 启动Git Bash Here后的界面 安装Hexo在打开的Git Bash界面内，我们输入如下的命令即可完成Hexo的安装 npm install -g hexo-cli Hexo &amp; NexT 让我们的博客更完美使用Hexo与NexT通常我们会有如下的操作来初始化我们的hexo博客，请打开我们的GitBash，在命令行中输入下列的命令： cd d:用于切换到指定盘符下，随您喜欢（建议找一个您方便查看的盘符下） hexo init yourfilenameyourfilename是您指定的文件夹名称（建议英文名，如果您没有好的名字，可以试试“myblog”） cd yourfilename进入到我们hexo初始化的文件夹目录下 npm install完成安装 git clone https://github.com/iissnan/hexo-theme-next themes/next下载NexT主题 打开位于站点(yourfilename)根目录下_config.yml文件，找到 theme 字段，并将其值更改为 next 回到GitBash界面，使用hexo server启动我们的站点 启动后，打开浏览器，输入：localhost:4000即可看到我们本地启动的博客 到此为止，恭喜您，已经成功的让自己的博客运行起来了。 部署本地的博客站点到GitHub上配置Git 安装hexo-deployer-git,在GitBash中使用如下命令npm install hexo-deployer-git --save 在站点根目录下的_config.yml中修改配置deploy: type: git repo: &lt;repository url&gt; branch: master message: 获取repository url,可参照下图： hexo deploy执行后，按照提示输入git账户与密码后，即可完成部署 此时访问您的站点：https://yourname.github.io/即可看您搭建好的博客 感谢您的坚持，同时恭喜您，您的博客已经搭建好了 后续本博客搭建也好，还是后续的文章编写等，都涉及到命令行，因此需要各位读者在后续的时间里，对Hexo的命令，以及Git的命令都要有所了解，同时还要对Markdown的语法有一定的了解，能够编写最基本的Markdown语法的文章。相关学习资料如下（坚持学习，您将能够获得更多的收获）： Git 简体中文版Hexo 文档Markdown 入门参考NexT 使用指南]]></content>
    </entry>

    
  
  
</search>
